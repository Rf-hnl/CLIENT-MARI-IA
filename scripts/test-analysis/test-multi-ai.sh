#!/bin/bash

# Test del Multi-AI Provider con fallback autom√°tico
# Este script prueba OpenAI ‚Üí Gemini fallback

echo "üß™ TESTING MULTI-AI PROVIDER CON FALLBACK"
echo "========================================"
echo ""

# Configuraci√≥n
BASE_URL="http://localhost:3000"
LEAD_ID="e2966ef7-c52a-468e-9faf-91c29521e8a8"
CONVERSATION_ID="conv_0701k3a38ks2etmbjkpd3ad3ry0c"

# Headers
HEADERS=(
    -H "Content-Type: application/json" 
    -H "Accept: application/json"
)

# Transcript de prueba peque√±o
SAMPLE_TRANSCRIPT='{
  "transcript": {
    "messages": [
      {
        "role": "agent",
        "content": "Hola, te contacto para ofrecerte nuestro sistema de facturaci√≥n.",
        "timestamp": 1634567890
      },
      {
        "role": "client",
        "content": "Me interesa, pero tengo presupuesto limitado.",
        "timestamp": 1634567900
      }
    ],
    "duration": 30,
    "totalWords": 15,
    "participantCount": 2
  },
  "agentId": null
}'

echo "üîß CONFIGURACI√ìN:"
echo "Base URL: $BASE_URL"
echo "Lead ID: $LEAD_ID"
echo "Conversation ID: $CONVERSATION_ID"
echo ""

# Funci√≥n para mostrar resultado
show_result() {
    local test_name=$1
    local status_code=$2
    local response_body=$3
    
    echo "================================"
    echo "üìä RESULTADO: $test_name"
    echo "================================"
    echo "Status Code: $status_code"
    echo ""
    echo "Response Body:"
    echo "$response_body" | jq . 2>/dev/null || echo "$response_body"
    echo ""
    
    # Detectar qu√© proveedor se us√≥
    if echo "$response_body" | grep -q '"provider"'; then
        provider=$(echo "$response_body" | jq -r '.usedAgent // .agentName // "Unknown"' 2>/dev/null)
        echo "ü§ñ Proveedor usado: $provider"
    fi
    
    if [ "$status_code" = "200" ]; then
        echo "‚úÖ √âXITO: An√°lisis completado"
    elif [ "$status_code" = "429" ]; then
        echo "‚ö†Ô∏è  RATE LIMIT: Demasiadas peticiones"
    elif [ "$status_code" = "401" ]; then
        echo "üîê AUTH ERROR: Token inv√°lido o expirado"  
    elif [ "$status_code" = "500" ]; then
        echo "‚ùå ERROR SERVER: Problema interno"
        echo "    Revisar logs del servidor para detalles"
    else
        echo "‚ö†Ô∏è  STATUS: $status_code"
    fi
    echo ""
}

echo "üß™ PRUEBA 1: AN√ÅLISIS DE SENTIMENT (Multi-AI Fallback)"
echo "===================================================="
echo "Intentando an√°lisis de sentiment..."
echo "Expectativa: OpenAI fallar√° ‚Üí Gemini tomar√° el control"
echo ""

response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -X POST "$BASE_URL/api/leads/$LEAD_ID/conversations/$CONVERSATION_ID/analysis/sentiment" \
    "${HEADERS[@]}" \
    -d "$SAMPLE_TRANSCRIPT")

# Extraer status code y body
status_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
response_body=$(echo "$response" | sed 's/HTTPSTATUS:[0-9]*$//')

show_result "SENTIMENT con Multi-AI" "$status_code" "$response_body"

echo "‚è≥ Esperando 3 segundos antes de la siguiente prueba..."
sleep 3

echo "üß™ PRUEBA 2: AN√ÅLISIS DE QUALITY (Multi-AI Fallback)"
echo "=================================================="
echo ""

response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -X POST "$BASE_URL/api/leads/$LEAD_ID/conversations/$CONVERSATION_ID/analysis/quality" \
    "${HEADERS[@]}" \
    -d "$SAMPLE_TRANSCRIPT")

# Extraer status code y body
status_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
response_body=$(echo "$response" | sed 's/HTTPSTATUS:[0-9]*$//')

show_result "QUALITY con Multi-AI" "$status_code" "$response_body"

echo "üèÅ RESUMEN DEL TEST MULTI-AI"
echo "============================="
echo ""
echo "‚úÖ Tests completados con sistema Multi-AI Provider"
echo ""
echo "üîç QU√â BUSCAR EN LOS RESULTADOS:"
echo ""
echo "1. **Si OpenAI funciona:**"
echo "   - Proveedor usado: 'Openai Fallback'"
echo "   - Status: 200"
echo ""
echo "2. **Si OpenAI falla y Gemini funciona:**" 
echo "   - Proveedor usado: 'Gemini Fallback'"
echo "   - Status: 200"
echo "   - ‚úÖ √âXITO: Fallback funcionando!"
echo ""
echo "3. **Si ambos fallan:**"
echo "   - Status: 500"
echo "   - Error: 'All AI providers failed'"
echo "   - Necesitas configurar al menos una API key v√°lida"
echo ""
echo "üìñ CONFIGURACI√ìN:"
echo "- OpenAI: Edita OPENAI_API_KEY en .env.local"
echo "- Gemini: Edita GEMINI_API_KEY en .env.local" 
echo "- Documentaci√≥n: Lee GEMINI_SETUP.md"
echo ""
echo "üöÄ PARA OBTENER GEMINI API KEY GRATIS:"
echo "   https://makersuite.google.com/app/apikey"