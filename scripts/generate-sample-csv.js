/**
 * SCRIPT - GENERAR CSV DE MUESTRA
 * 
 * Genera un archivo CSV de muestra basado en el formato del CRM analizado
 * √ötil para testing y demostraci√≥n del sistema de importaci√≥n
 */

const fs = require('fs');
const path = require('path');

// Datos de ejemplo basados en el CSV original
const sampleData = {
  etapas: [
    'Nuevos Leads / Pendientes',
    'Leads Potenciales / Prioritario', 
    'Calificado - En seguimiento',
    'En seguimiento / Sin respuesta',
    'Negociaci√≥n / En ajustes',
    'Cotizaci√≥n enviada / Campa√±as anteriores',
    'Cotizaciones / Campa√±a Actual Jun - Jul',
    'A futuro / En pausa',
    'Ganado / Cerrado',
    'Propuesta declinada',
    'Leads descartados / No calificados'
  ],
  
  prioridades: ['Muy alta', 'Alta', 'Medio', 'Baja'],
  
  empresas: [
    'Tech Solutions Panama',
    'Digital Marketing Pro',
    'Innovate Business Hub',
    'Smart Analytics Corp',
    'Cloud Services Plus',
    'Data Insights Panama',
    'NextGen Software',
    'Business Intelligence Co',
    'Digital Transform SA',
    'Cyber Security Solutions',
    'E-Commerce Masters',
    'Software Development Inc',
    'IT Consulting Group',
    'Digital Strategy Lab',
    'Innovation Hub Panama'
  ],
  
  personas: [
    'Mar√≠a Gonz√°lez Ruiz',
    'Carlos Alberto Mendoza',
    'Ana Patricia Torres',
    'Jos√© Luis Hern√°ndez',
    'Carmen Elena Vargas',
    'Roberto Antonio Silva',
    'Luz Marina Castro',
    'Fernando Jos√© Morales',
    'Patricia Isabel Ramos',
    'Miguel √Ångel Delgado',
    'Sof√≠a Carolina Jim√©nez',
    'Andr√©s Felipe Rojas',
    'Claudia Marcela L√≥pez',
    'Daniel Eduardo Santos',
    'Gabriela Alejandra Cruz'
  ],
  
  actividades: [
    'Llamada de seguimiento programada',
    'Env√≠o de propuesta comercial',
    'Reuni√≥n virtual agendada',
    'Demostraci√≥n del producto',
    'Seguimiento a cotizaci√≥n',
    'Llamada en fr√≠o inicial',
    'An√°lisis de requerimientos',
    'Presentaci√≥n de soluci√≥n',
    'Negociaci√≥n de contrato',
    'Cierre de venta'
  ],
  
  emails: [
    'ventas@techsolutions.pa',
    'contacto@digitalpro.com',
    'info@innovatehub.pa',
    'sales@smartanalytics.co',
    'comercial@cloudplus.pa'
  ]
};

// Funci√≥n para generar un valor aleatorio de un array
const randomFromArray = (array) => array[Math.floor(Math.random() * array.length)];

// Funci√≥n para generar probabilidad basada en etapa
const generateProbability = (etapa) => {
  const probabilityRanges = {
    'Nuevos Leads / Pendientes': [1, 25],
    'Leads Potenciales / Prioritario': [25, 50],
    'Calificado - En seguimiento': [50, 70],
    'En seguimiento / Sin respuesta': [20, 45],
    'Negociaci√≥n / En ajustes': [60, 85],
    'Cotizaci√≥n enviada / Campa√±as anteriores': [70, 85],
    'Cotizaciones / Campa√±a Actual Jun - Jul': [50, 99],
    'A futuro / En pausa': [40, 70],
    'Ganado / Cerrado': [100, 100],
    'Propuesta declinada': [0, 30],
    'Leads descartados / No calificados': [0, 20]
  };
  
  const range = probabilityRanges[etapa] || [1, 50];
  const probability = Math.random() * (range[1] - range[0]) + range[0];
  return probability.toFixed(2);
};

// Funci√≥n para generar ingresos esperados
const generateRevenue = (etapa) => {
  if (etapa === 'Leads descartados / No calificados' || etapa === 'Nuevos Leads / Pendientes') {
    return '0.00';
  }
  
  const baseAmount = Math.random() * 5000 + 500; // Entre 500 y 5500
  return baseAmount.toFixed(2);
};

// Funci√≥n para generar un lead de muestra
const generateSampleLead = () => {
  const etapa = randomFromArray(sampleData.etapas);
  const isCompany = Math.random() > 0.6; // 60% chance de ser empresa
  const oportunidad = isCompany ? randomFromArray(sampleData.empresas) : randomFromArray(sampleData.personas);
  const prioridad = randomFromArray(sampleData.prioridades);
  const probabilidad = generateProbability(etapa);
  const ingresos = generateRevenue(etapa);
  const actividad = randomFromArray(sampleData.actividades);
  const comercial = randomFromArray(sampleData.emails);
  
  return {
    'Etapa': etapa,
    'Probabilidad': probabilidad,
    'Activo': 'VERDADERO',
    'Moneda': 'PAB',
    'MMR esperado': '0.00',
    'Equipo de ventas': 'Ventas',
    'Ganado/Perdido': etapa === 'Ganado / Cerrado' ? 'Ganado' : 'Pendiente',
    '√çndice de Colores': '0',
    'Oportunidad': oportunidad,
    'Ingresos esperados': ingresos,
    'Cliente': isCompany ? oportunidad : '',
    'Etiquetas': Math.random() > 0.7 ? 'prospecto,interesado' : '',
    'Propiedades': Math.random() > 0.8 ? 'Contacto v√≠a LinkedIn' : '',
    'Prioridad': prioridad,
    'Actividades': Math.random() > 0.5 ? actividad : '',
    'Decoraci√≥n de Actividad de Excepci√≥n': '',
    'Icono': '',
    'Estado de la actividad': Math.random() > 0.6 ? 'Planificado' : '',
    'Resumen de la siguiente actividad': Math.random() > 0.5 ? actividad : '',
    'Icono de tipo de actvidad': Math.random() > 0.7 ? 'fa-check' : '',
    'Tipo de la siguiente actividad': Math.random() > 0.6 ? 'Actividades pendientes' : '',
    'Comercial': comercial,
    'Propiedad 1': ''
  };
};

// Funci√≥n para generar CSV
const generateCSV = (numLeads = 50) => {
  const leads = [];
  
  // Headers
  const headers = [
    'Etapa', 'Probabilidad', 'Activo', 'Moneda', 'MMR esperado', 
    'Equipo de ventas', 'Ganado/Perdido', '√çndice de Colores', 'Oportunidad', 
    'Ingresos esperados', 'Cliente', 'Etiquetas', 'Propiedades', 'Prioridad', 
    'Actividades', 'Decoraci√≥n de Actividad de Excepci√≥n', 'Icono', 
    'Estado de la actividad', 'Resumen de la siguiente actividad', 
    'Icono de tipo de actvidad', 'Tipo de la siguiente actividad', 'Comercial', 'Propiedad 1'
  ];
  
  // Generar leads
  for (let i = 0; i < numLeads; i++) {
    leads.push(generateSampleLead());
  }
  
  // Convertir a CSV
  let csvContent = headers.join(';') + '\n';
  
  leads.forEach(lead => {
    const row = headers.map(header => {
      const value = lead[header] || '';
      // Escapar punto y coma si existe en el valor
      return value.toString().replace(/;/g, ',');
    });
    csvContent += row.join(';') + '\n';
  });
  
  return csvContent;
};

// Generar y guardar archivo CSV
const main = () => {
  const numLeads = process.argv[2] ? parseInt(process.argv[2]) : 50;
  const outputPath = process.argv[3] || path.join(__dirname, '..', 'data', 'sample-leads.csv');
  
  console.log(`üîÑ Generando ${numLeads} leads de muestra...`);
  
  const csvContent = generateCSV(numLeads);
  
  // Crear directorio si no existe
  const dir = path.dirname(outputPath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  // Escribir archivo
  fs.writeFileSync(outputPath, csvContent, 'utf8');
  
  console.log(`‚úÖ Archivo CSV generado: ${outputPath}`);
  console.log(`üìä Total de leads: ${numLeads}`);
  
  // Mostrar estad√≠sticas
  const lines = csvContent.split('\n');
  const dataLines = lines.slice(1, -1); // Excluir header y l√≠nea vac√≠a final
  
  const stats = {
    etapas: {},
    prioridades: {}
  };
  
  dataLines.forEach(line => {
    const columns = line.split(';');
    const etapa = columns[0];
    const prioridad = columns[13];
    
    stats.etapas[etapa] = (stats.etapas[etapa] || 0) + 1;
    stats.prioridades[prioridad] = (stats.prioridades[prioridad] || 0) + 1;
  });
  
  console.log('\nüìà Distribuci√≥n por etapa:');
  Object.entries(stats.etapas).forEach(([etapa, count]) => {
    console.log(`  ${etapa}: ${count}`);
  });
  
  console.log('\nüéØ Distribuci√≥n por prioridad:');
  Object.entries(stats.prioridades).forEach(([prioridad, count]) => {
    console.log(`  ${prioridad}: ${count}`);
  });
  
  console.log(`\nüí° Para importar este archivo, usa el bot√≥n "Importar CSV" en la interfaz de leads.`);
};

// Ejecutar si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = { generateCSV, generateSampleLead };