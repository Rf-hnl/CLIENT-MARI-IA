import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import * as jose from 'jose';
import { ConversationAnalyzer } from '@/lib/ai/conversationAnalyzer';

/**
 * POST - An√°lisis espec√≠fico por mensaje de una conversaci√≥n
 */
export async function POST(
  request: NextRequest, 
  { params }: { params: Promise<{ id: string; conversationId: string }> }
) {
  try {
    const { id: leadId, conversationId } = await params;
    console.log('üí¨ [MESSAGE ANALYSIS] Starting per-message analysis for:', { leadId, conversationId });

    // 1. Autenticaci√≥n
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ error: 'No authorization header' }, { status: 401 });
    }

    const token = authHeader.replace('Bearer ', '');
    const secret = new TextEncoder().encode(
      process.env.JWT_SECRET || 'super-secret-key-for-debugging-only'
    );

    let user;
    try {
      const { payload } = await jose.jwtVerify(token, secret);
      user = { 
        id: payload.userId as string, 
        email: payload.email as string
      };
    } catch {
      return NextResponse.json({ error: 'Invalid or expired token' }, { status: 401 });
    }

    // 2. Obtener tenant usando el userId
    const tenant = await prisma.tenant.findFirst({
      where: { ownerId: user.id }
    });

    if (!tenant) {
      return NextResponse.json({ error: 'Tenant not found' }, { status: 404 });
    }

    // 3. Verificar que el lead pertenece al tenant
    const lead = await prisma.lead.findFirst({
      where: {
        id: leadId,
        tenantId: tenant.id
      }
    });

    if (!lead) {
      return NextResponse.json({ error: 'Lead not found' }, { status: 404 });
    }

    // 4. Obtener datos del cuerpo de la petici√≥n
    const body = await request.json();
    const { transcript, agentId } = body;

    if (!transcript) {
      return NextResponse.json({ error: 'Transcript is required' }, { status: 400 });
    }

    // 5. Crear instancia del analizador
    const analyzer = new ConversationAnalyzer();

    // 6. Crear prompt espec√≠fico para an√°lisis por mensaje
    const messagesPrompt = buildMessageAnalysisPrompt(transcript);

    // 7. Ejecutar an√°lisis por mensaje con agente espec√≠fico
    console.log('ü§ñ [MESSAGE ANALYSIS] Using per-message analysis prompt with agent:', agentId || 'auto');
    
    // Use the private method correctly via reflection
    const aiResponse = await (analyzer as any).callDirectOpenAI(messagesPrompt, 'message_analysis');

    // 8. Procesar respuesta espec√≠fica de an√°lisis por mensaje
    const messageData = parseMessageAnalysisResponse(aiResponse);

    console.log('‚úÖ [MESSAGE ANALYSIS] Per-message analysis completed successfully');

    return NextResponse.json({
      success: true,
      analysisType: 'message_analysis',
      data: messageData,
      processingTime: Date.now(),
      usedAgent: aiResponse.agentName || 'Default',
      model: aiResponse.model || 'Unknown'
    });

  } catch (error) {
    console.error('‚ùå [MESSAGE ANALYSIS] Error in per-message analysis:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

/**
 * Crear prompt espec√≠fico para an√°lisis por mensaje
 */
function buildMessageAnalysisPrompt(transcript: any): string {
  const messages = transcript.messages
    .map((msg: any, index: number) => `${index + 1}. ${msg.role.toUpperCase()}: ${msg.content}`)
    .join('\n');

  return `
ANALIZA CADA MENSAJE DEL CLIENTE EN ESTA CONVERSACI√ìN - ENFOQUE EXCLUSIVO POR MENSAJE:

=== CONVERSACI√ìN ===
${messages}

=== DURACI√ìN ===
${Math.floor(transcript.duration / 60)} minutos, ${transcript.totalWords} palabras

=== INSTRUCCIONES ESPEC√çFICAS PARA AN√ÅLISIS POR MENSAJE ===
Analiza √öNICAMENTE cada mensaje del CLIENTE/LEAD (NO del agente). Para cada mensaje del cliente, extrae:

1. SENTIMENT espec√≠fico del mensaje
2. EMOCIONES detectadas
3. INTENCI√ìN del mensaje (pregunta, objeci√≥n, inter√©s, etc.)
4. FRASES CLAVE importantes
5. NIVEL DE URGENCIA expresado
6. INDICADORES de toma de decisi√≥n
7. INFORMACI√ìN VALIOSA proporcionada
8. CAMBIOS en el tono o actitud

IMPORTANTE: Solo analiza mensajes del CLIENTE/LEAD, ignora mensajes del agente.

Responde √öNICAMENTE con este JSON:

{
  "totalMessages": n√∫mero total de mensajes en la conversaci√≥n,
  "clientMessages": n√∫mero de mensajes del cliente,
  "agentMessages": n√∫mero de mensajes del agente,
  "sentimentProgression": "descripci√≥n de c√≥mo cambi√≥ el sentiment del cliente",
  "overallClientJourney": "resumen del viaje del cliente durante la conversaci√≥n",
  "keyTransitionMoments": [
    {
      "messageIndex": n√∫mero del mensaje donde ocurri√≥ la transici√≥n,
      "transition": "descripci√≥n del cambio",
      "impact": "high|medium|low",
      "trigger": "qu√© caus√≥ este cambio"
    }
  ],
  "messagesAnalysis": [
    {
      "messageIndex": n√∫mero del mensaje del cliente (no contar mensajes del agente),
      "content": "texto completo del mensaje del cliente",
      "sentiment": "positive|negative|neutral|mixed",
      "sentimentScore": n√∫mero entre -1.0 y 1.0,
      "confidence": n√∫mero entre 0.0 y 1.0,
      "emotions": ["happy", "frustrated", "interested", "confused", "excited", "worried", ...],
      "intent": "question|objection|interest|agreement|concern|information|decision",
      "urgencyLevel": "low|medium|high|critical",
      "keyPhrases": ["frase importante 1", "frase importante 2", ...],
      "businessInfo": "informaci√≥n de negocio revelada en este mensaje",
      "decisionIndicators": ["indicador 1", "indicador 2"],
      "painPointsRevealed": ["dolor 1", "dolor 2"],
      "buyingSignalsDetected": ["se√±al 1", "se√±al 2"],
      "objectionType": "price|timing|authority|need|trust|feature|other|none",
      "informationValue": "high|medium|low|none",
      "responseQuality": "detailed|moderate|brief|minimal",
      "reasoning": "por qu√© se clasific√≥ de esta manera"
    }
  ],
  "clientBehaviorPatterns": {
    "engagement_trend": "increasing|stable|decreasing|volatile",
    "information_sharing": "open|selective|cautious|closed",
    "decision_making_style": "analytical|impulsive|collaborative|cautious",
    "communication_style": "direct|diplomatic|detailed|concise"
  },
  "criticalMoments": [
    {
      "messageIndex": n√∫mero del mensaje,
      "moment": "descripci√≥n del momento cr√≠tico",
      "type": "breakthrough|objection|interest_peak|concern|decision_point",
      "impact_on_deal": "positive|negative|neutral",
      "follow_up_needed": "descripci√≥n de seguimiento necesario"
    }
  ],
  "insights": {
    "strongest_message": "cu√°l mensaje mostr√≥ m√°s inter√©s/engagement",
    "weakest_message": "cu√°l mensaje mostr√≥ menos inter√©s/preocupaciones",
    "most_informative": "cu√°l mensaje proporcion√≥ m√°s informaci√≥n valiosa",
    "decision_readiness_indicators": ["indicador 1", "indicador 2"],
    "relationship_building_moments": ["momento 1", "momento 2"]
  }
}

RESPONDE √öNICAMENTE CON EL JSON. NO AGREGUES TEXTO ADICIONAL.
`;
}

/**
 * Procesar respuesta de IA espec√≠fica para an√°lisis por mensaje
 */
function parseMessageAnalysisResponse(aiResponse: any): any {
  try {
    const jsonContent = aiResponse.content || aiResponse;
    
    // Limpiar respuesta y extraer JSON
    let cleanJson = jsonContent;
    if (typeof cleanJson === 'string') {
      cleanJson = cleanJson.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      cleanJson = cleanJson.trim();
    }

    const parsed = JSON.parse(cleanJson);
    
    // Validar estructura espec√≠fica de an√°lisis por mensaje
    if (!Array.isArray(parsed.messagesAnalysis) || parsed.clientMessages === undefined) {
      throw new Error('Invalid message analysis structure');
    }
    
    return {
      ...parsed,
      analysisType: 'message_analysis',
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå [MESSAGE ANALYSIS] Error parsing AI response:', error);
    
    // Retornar estructura por defecto en caso de error
    return {
      totalMessages: 0,
      clientMessages: 0,
      agentMessages: 0,
      sentimentProgression: 'An√°lisis no disponible debido a error',
      overallClientJourney: 'No se pudo analizar el viaje del cliente',
      keyTransitionMoments: [],
      messagesAnalysis: [{
        messageIndex: 1,
        content: 'Error en el an√°lisis autom√°tico',
        sentiment: 'neutral',
        sentimentScore: 0,
        confidence: 0.5,
        emotions: ['uncertain'],
        intent: 'information',
        urgencyLevel: 'medium',
        keyPhrases: ['error de an√°lisis'],
        businessInfo: 'No disponible',
        decisionIndicators: [],
        painPointsRevealed: [],
        buyingSignalsDetected: [],
        objectionType: 'none',
        informationValue: 'low',
        responseQuality: 'minimal',
        reasoning: 'Error en procesamiento de IA'
      }],
      clientBehaviorPatterns: {
        engagement_trend: 'stable',
        information_sharing: 'selective',
        decision_making_style: 'cautious',
        communication_style: 'concise'
      },
      criticalMoments: [{
        messageIndex: 1,
        moment: 'Error en an√°lisis autom√°tico',
        type: 'concern',
        impact_on_deal: 'neutral',
        follow_up_needed: 'Revisar transcripci√≥n manualmente'
      }],
      insights: {
        strongest_message: 'No determinado debido a error',
        weakest_message: 'No determinado debido a error',
        most_informative: 'No determinado debido a error',
        decision_readiness_indicators: ['An√°lisis manual requerido'],
        relationship_building_moments: ['No disponible']
      },
      analysisType: 'message_analysis',
      timestamp: new Date().toISOString(),
      error: 'Analysis parsing failed'
    };
  }
}