import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import * as jose from 'jose';
import { ConversationAnalyzer } from '@/lib/ai/conversationAnalyzer';

/**
 * POST - Generaci√≥n de acciones inteligentes basadas en una conversaci√≥n
 */
export async function POST(
  request: NextRequest, 
  { params }: { params: Promise<{ id: string; conversationId: string }> }
) {
  try {
    const { id: leadId, conversationId } = await params;
    console.log('‚ö° [ACTIONS ANALYSIS] Starting intelligent actions generation for:', { leadId, conversationId });

    // 1. Autenticaci√≥n
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ error: 'No authorization header' }, { status: 401 });
    }

    const token = authHeader.replace('Bearer ', '');
    const secret = new TextEncoder().encode(
      process.env.JWT_SECRET || 'super-secret-key-for-debugging-only'
    );

    let user;
    try {
      const { payload } = await jose.jwtVerify(token, secret);
      user = { 
        id: payload.userId as string, 
        email: payload.email as string
      };
    } catch {
      return NextResponse.json({ error: 'Invalid or expired token' }, { status: 401 });
    }

    // 2. Obtener tenant usando el userId
    const tenant = await prisma.tenant.findFirst({
      where: { ownerId: user.id }
    });

    if (!tenant) {
      return NextResponse.json({ error: 'Tenant not found' }, { status: 404 });
    }

    // 3. Verificar que el lead pertenece al tenant
    const lead = await prisma.lead.findFirst({
      where: {
        id: leadId,
        tenantId: tenant.id
      }
    });

    if (!lead) {
      return NextResponse.json({ error: 'Lead not found' }, { status: 404 });
    }

    // 4. Obtener datos del cuerpo de la petici√≥n
    const body = await request.json();
    const { transcript, agentId } = body;

    if (!transcript) {
      return NextResponse.json({ error: 'Transcript is required' }, { status: 400 });
    }

    // 5. Crear instancia del analizador
    const analyzer = new ConversationAnalyzer();

    // 6. Crear prompt espec√≠fico para generaci√≥n de acciones inteligentes
    const actionsPrompt = buildActionsPrompt(transcript, lead);

    // 7. Ejecutar generaci√≥n de acciones con agente espec√≠fico
    console.log('ü§ñ [ACTIONS ANALYSIS] Using actions-focused prompt with agent:', agentId || 'auto');
    
    // Use the private method correctly via reflection
    const aiResponse = await (analyzer as any).callDirectOpenAI(actionsPrompt, 'actions');

    // 8. Procesar respuesta espec√≠fica de acciones inteligentes
    const actionsData = parseActionsResponse(aiResponse);

    console.log('‚úÖ [ACTIONS ANALYSIS] Intelligent actions generation completed successfully');

    return NextResponse.json({
      success: true,
      analysisType: 'actions',
      data: actionsData,
      processingTime: Date.now(),
      usedAgent: aiResponse.agentName || 'Default',
      model: aiResponse.model || 'Unknown'
    });

  } catch (error) {
    console.error('‚ùå [ACTIONS ANALYSIS] Error in intelligent actions generation:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

/**
 * Crear prompt espec√≠fico para generaci√≥n de acciones inteligentes
 */
function buildActionsPrompt(transcript: any, lead: any): string {
  const messages = transcript.messages
    .map((msg: any) => `${msg.role.toUpperCase()}: ${msg.content}`)
    .join('\n');

  return `
GENERA ACCIONES INTELIGENTES EJECUTABLES PARA ESTA CONVERSACI√ìN DE VENTAS:

=== INFORMACI√ìN DEL LEAD ===
Nombre: ${lead.name}
Tel√©fono: ${lead.phone}
Email: ${lead.email || 'No disponible'}
Empresa: ${lead.company || 'No especificada'}
Estado: ${lead.status}
Prioridad: ${lead.priority}

=== CONVERSACI√ìN ===
${messages}

=== DURACI√ìN ===
${Math.floor(transcript.duration / 60)} minutos, ${transcript.totalWords} palabras

=== INSTRUCCIONES ESPEC√çFICAS PARA GENERACI√ìN DE ACCIONES ===
Genera √öNICAMENTE acciones espec√≠ficas, ejecutables y priorizadas basadas en esta conversaci√≥n. 

TIPOS DE ACCIONES DISPONIBLES:
1. schedule_meeting - Programar reuni√≥n/demo
2. send_proposal - Enviar propuesta comercial
3. send_demo_link - Enviar enlace de demo/video
4. make_followup_call - Programar llamada de seguimiento
5. send_comparison - Enviar comparaci√≥n vs competidores
6. address_objection - Abordar objeci√≥n espec√≠fica
7. send_case_study - Enviar caso de estudio relevante
8. escalate_manager - Escalar a manager/ejecutivo senior
9. send_pricing - Enviar informaci√≥n de precios
10. schedule_technical_demo - Demo t√©cnico especializado

Para cada acci√≥n, considera:
- Qu√© se discuti√≥ en la conversaci√≥n
- Se√±ales de inter√©s detectadas
- Objeciones planteadas
- Informaci√≥n solicitada
- Urgencia expresada
- Siguiente paso l√≥gico

Responde √öNICAMENTE con este JSON:

{
  "totalActions": n√∫mero total de acciones generadas,
  "highPriority": n√∫mero de acciones de alta prioridad,
  "actionsSummary": "resumen ejecutivo de las acciones recomendadas",
  "generatedActions": [
    {
      "id": "action_1",
      "type": "schedule_meeting|send_proposal|send_demo_link|make_followup_call|send_comparison|address_objection|send_case_study|escalate_manager|send_pricing|schedule_technical_demo",
      "title": "T√≠tulo espec√≠fico de la acci√≥n",
      "description": "Descripci√≥n detallada de qu√© hacer",
      "priority": "high|medium|low",
      "urgency": "immediate|1_day|3_days|1_week|2_weeks",
      "reasoning": "por qu√© se recomienda esta acci√≥n basado en la conversaci√≥n",
      "trigger": "qu√© en la conversaci√≥n gener√≥ esta recomendaci√≥n",
      "expectedOutcome": "resultado esperado de esta acci√≥n",
      "executionDetails": {
        "when": "cu√°ndo ejecutar la acci√≥n",
        "how": "c√≥mo ejecutar la acci√≥n espec√≠ficamente",
        "what_to_include": "qu√© incluir en la comunicaci√≥n",
        "personalization": "c√≥mo personalizar basado en la conversaci√≥n"
      },
      "successMetrics": ["m√©trica 1", "m√©trica 2"],
      "risksIfNotDone": "riesgos si no se ejecuta esta acci√≥n",
      "dependencies": ["acci√≥n o recurso requerido antes de ejecutar"]
    }
  ],
  "sequenceRecommendation": [
    {
      "order": 1,
      "actionId": "action_1",
      "reasoning": "por qu√© debe ir en este orden"
    }
  ],
  "strategicContext": {
    "dealStage": "awareness|interest|consideration|intent|evaluation|purchase",
    "clientReadiness": "ready_to_buy|evaluating|early_interest|just_browsing",
    "keyOpportunities": ["oportunidad 1", "oportunidad 2"],
    "potentialRisks": ["riesgo 1", "riesgo 2"],
    "competitiveThreats": ["amenaza 1", "amenaza 2"]
  },
  "automationOpportunities": [
    {
      "action": "qu√© se puede automatizar",
      "method": "c√≥mo automatizar",
      "benefits": "beneficios de automatizar",
      "requirements": "qu√© se necesita para automatizar"
    }
  ],
  "personalizationData": {
    "client_interests": ["inter√©s espec√≠fico 1", "inter√©s espec√≠fico 2"],
    "pain_points_to_address": ["dolor 1", "dolor 2"],
    "preferred_communication": "email|phone|meeting|demo",
    "decision_timeline": "timeline mencionado o inferido",
    "budget_indicators": "indicadores de presupuesto encontrados"
  }
}

RESPONDE √öNICAMENTE CON EL JSON. NO AGREGUES TEXTO ADICIONAL.
`;
}

/**
 * Procesar respuesta de IA espec√≠fica para acciones inteligentes
 */
function parseActionsResponse(aiResponse: any): any {
  try {
    const jsonContent = aiResponse.content || aiResponse;
    
    // Limpiar respuesta y extraer JSON
    let cleanJson = jsonContent;
    if (typeof cleanJson === 'string') {
      cleanJson = cleanJson.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      cleanJson = cleanJson.trim();
    }

    const parsed = JSON.parse(cleanJson);
    
    // Validar estructura espec√≠fica de acciones
    if (!Array.isArray(parsed.generatedActions) || parsed.totalActions === undefined) {
      throw new Error('Invalid actions analysis structure');
    }
    
    return {
      ...parsed,
      analysisType: 'actions',
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå [ACTIONS ANALYSIS] Error parsing AI response:', error);
    
    // Retornar estructura por defecto en caso de error
    return {
      totalActions: 1,
      highPriority: 1,
      actionsSummary: 'Error en an√°lisis autom√°tico - revisar manualmente',
      generatedActions: [{
        id: 'action_error_1',
        type: 'make_followup_call',
        title: 'Revisar Conversaci√≥n Manualmente',
        description: 'El an√°lisis autom√°tico fall√≥. Revisar la transcripci√≥n manualmente para determinar pr√≥ximos pasos.',
        priority: 'high',
        urgency: 'immediate',
        reasoning: 'Sistema de an√°lisis autom√°tico no pudo procesar la conversaci√≥n correctamente',
        trigger: 'Error en procesamiento de IA',
        expectedOutcome: 'Comprensi√≥n clara de la conversaci√≥n y pr√≥ximos pasos',
        executionDetails: {
          when: 'Lo antes posible',
          how: 'Revisar transcripci√≥n completa y contexto del lead',
          what_to_include: 'An√°lisis manual de la conversaci√≥n',
          personalization: 'Basado en informaci√≥n espec√≠fica del lead'
        },
        successMetrics: ['Comprensi√≥n clara de la conversaci√≥n', 'Plan de acci√≥n definido'],
        risksIfNotDone: 'P√©rdida de oportunidad por falta de seguimiento',
        dependencies: ['Acceso a transcripci√≥n completa']
      }],
      sequenceRecommendation: [{
        order: 1,
        actionId: 'action_error_1',
        reasoning: 'Es prioritario entender la conversaci√≥n antes de tomar cualquier acci√≥n'
      }],
      strategicContext: {
        dealStage: 'evaluation',
        clientReadiness: 'evaluating',
        keyOpportunities: ['An√°lisis manual detallado'],
        potentialRisks: ['Error en an√°lisis autom√°tico'],
        competitiveThreats: ['No determinadas']
      },
      automationOpportunities: [{
        action: 'Mejorar sistema de an√°lisis autom√°tico',
        method: 'Optimizar prompts y validaci√≥n de respuestas',
        benefits: 'An√°lisis m√°s confiable y consistente',
        requirements: 'Desarrollo y testing adicional'
      }],
      personalizationData: {
        client_interests: ['No determinados debido a error'],
        pain_points_to_address: ['Error en sistema de an√°lisis'],
        preferred_communication: 'phone',
        decision_timeline: 'No determinado',
        budget_indicators: 'No disponible'
      },
      analysisType: 'actions',
      timestamp: new Date().toISOString(),
      error: 'Analysis parsing failed'
    };
  }
}