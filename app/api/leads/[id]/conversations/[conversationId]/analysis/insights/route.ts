import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import * as jose from 'jose';
import { ConversationAnalyzer } from '@/lib/ai/conversationAnalyzer';

/**
 * POST - Extracci√≥n espec√≠fica de insights de una conversaci√≥n
 */
export async function POST(
  request: NextRequest, 
  { params }: { params: Promise<{ id: string; conversationId: string }> }
) {
  try {
    const { id: leadId, conversationId } = await params;
    console.log('üí° [INSIGHTS ANALYSIS] Starting insights extraction for:', { leadId, conversationId });

    // 1. Autenticaci√≥n
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ error: 'No authorization header' }, { status: 401 });
    }

    const token = authHeader.replace('Bearer ', '');
    const secret = new TextEncoder().encode(
      process.env.JWT_SECRET || 'super-secret-key-for-debugging-only'
    );

    let user;
    try {
      const { payload } = await jose.jwtVerify(token, secret);
      user = { 
        id: payload.userId as string, 
        email: payload.email as string
      };
    } catch {
      return NextResponse.json({ error: 'Invalid or expired token' }, { status: 401 });
    }

    // 2. Obtener tenant usando el userId
    const tenant = await prisma.tenant.findFirst({
      where: { ownerId: user.id }
    });

    if (!tenant) {
      return NextResponse.json({ error: 'Tenant not found' }, { status: 404 });
    }

    // 3. Verificar que el lead pertenece al tenant
    const lead = await prisma.lead.findFirst({
      where: {
        id: leadId,
        tenantId: tenant.id
      }
    });

    if (!lead) {
      return NextResponse.json({ error: 'Lead not found' }, { status: 404 });
    }

    // 4. Obtener datos del cuerpo de la petici√≥n
    const body = await request.json();
    const { transcript, agentId } = body;

    if (!transcript) {
      return NextResponse.json({ error: 'Transcript is required' }, { status: 400 });
    }

    // Log para debug del fallback
    if (!agentId) {
      console.log('üîÑ [INSIGHTS ANALYSIS] No agentId provided, backend will use OpenAI fallback');
    }

    // 5. Crear instancia del analizador
    const analyzer = new ConversationAnalyzer();

    // 6. Crear prompt espec√≠fico para extracci√≥n de insights
    const insightsPrompt = buildInsightsPrompt(transcript);

    // 7. Ejecutar extracci√≥n de insights - El analyzer manejar√° fallback autom√°ticamente
    console.log('ü§ñ [INSIGHTS ANALYSIS] Using insights-focused prompt with agent:', agentId || 'OpenAI Fallback');
    
    // Use the private method correctly via reflection
    const aiResponse = await (analyzer as any).callDirectOpenAI(insightsPrompt, 'insights');

    // 8. Procesar respuesta espec√≠fica de insights
    const insightsData = parseInsightsResponse(aiResponse);

    // 9. Buscar an√°lisis existente o crear uno nuevo
    let existingAnalysis = await prisma.conversationAnalysis.findFirst({
      where: {
        conversationId: conversationId,
        tenantId: tenant.id
      }
    });

    // 10. Actualizar o crear an√°lisis en la base de datos
    let savedAnalysis;
    if (existingAnalysis) {
      // Actualizar an√°lisis existente con datos de insights
      savedAnalysis = await prisma.conversationAnalysis.update({
        where: { id: existingAnalysis.id },
        data: {
          keyTopics: insightsData.keyTopics,
          mainPainPoints: insightsData.painPoints,
          buyingSignals: insightsData.buyingSignals,
          objections: insightsData.objections,
          // Guardar el an√°lisis completo de insights en rawInsights
          rawInsights: {
            ...((existingAnalysis.rawInsights as any) || {}),
            insights: insightsData
          },
          updatedAt: new Date()
        }
      });
    } else {
      // Crear nuevo an√°lisis con datos de insights
      savedAnalysis = await prisma.conversationAnalysis.create({
        data: {
          tenantId: tenant.id,
          organizationId: tenant.organizationId || tenant.id,
          leadId,
          conversationId,
          keyTopics: insightsData.keyTopics,
          mainPainPoints: insightsData.painPoints,
          buyingSignals: insightsData.buyingSignals,
          objections: insightsData.objections,
          rawInsights: {
            insights: insightsData
          },
          analysisModel: aiResponse.model || 'unknown',
          analysisVersion: '1.0',
          processingTime: Date.now()
        }
      });
    }

    console.log('‚úÖ [INSIGHTS ANALYSIS] Insights analysis completed and saved:', savedAnalysis.id);

    return NextResponse.json({
      success: true,
      analysisType: 'insights',
      data: insightsData,
      processingTime: Date.now(),
      usedAgent: aiResponse.agentName || 'Default',
      model: aiResponse.model || 'Unknown',
      savedToDatabase: true
    });

  } catch (error) {
    console.error('‚ùå [INSIGHTS ANALYSIS] Error in insights extraction:', error);
    
    // Determinar el status code y mensaje basado en el tipo de error
    let statusCode = 500;
    let errorTitle = 'Internal server error';
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    
    if (errorMessage.includes('insufficient_quota') || errorMessage.includes('exceeded your current quota')) {
      statusCode = 402;
      errorTitle = 'Insufficient credits';
    } else if (errorMessage.includes('Too Many Requests') || errorMessage.includes('429')) {
      statusCode = 429;
      errorTitle = 'Rate limit exceeded';
    } else if (errorMessage.includes('invalid_api_key') || errorMessage.includes('401')) {
      statusCode = 401;
      errorTitle = 'Invalid API key';
    }
    
    return NextResponse.json({ 
      error: errorTitle,
      details: errorMessage
    }, { status: statusCode });
  }
}

/**
 * Crear prompt espec√≠fico para extracci√≥n de insights
 */
function buildInsightsPrompt(transcript: any): string {
  const messages = transcript.messages
    .map((msg: any) => `${msg.role.toUpperCase()}: ${msg.content}`)
    .join('\n');

  return `
EXTRAE INSIGHTS CLAVE DE ESTA CONVERSACI√ìN DE VENTAS - ENFOQUE EXCLUSIVO EN INSIGHTS:

=== CONVERSACI√ìN ===
${messages}

=== DURACI√ìN ===
${Math.floor(transcript.duration / 60)} minutos, ${transcript.totalWords} palabras

=== INSTRUCCIONES ESPEC√çFICAS PARA EXTRACCI√ìN DE INSIGHTS ===
Extrae √öNICAMENTE los insights m√°s importantes de esta conversaci√≥n. Enf√≥cate en:

1. TEMAS PRINCIPALES discutidos
2. PUNTOS DE DOLOR expresados por el cliente
3. SE√ëALES DE COMPRA identificadas
4. OBJECIONES planteadas
5. COMPETIDORES mencionados
6. INFORMACI√ìN ESTRAT√âGICA clave
7. CONTEXTO DEL NEGOCIO del cliente
8. NECESIDADES espec√≠ficas identificadas

Busca informaci√≥n espec√≠fica y accionable, no generalidades.

Responde √öNICAMENTE con este JSON:

{
  "keyTopics": [
    "tema espec√≠fico 1",
    "tema espec√≠fico 2",
    "tema espec√≠fico 3"
  ],
  "painPoints": [
    {
      "pain": "punto de dolor espec√≠fico",
      "severity": "high|medium|low",
      "evidence": "cita textual o evidencia",
      "impact": "descripci√≥n del impacto en el negocio"
    }
  ],
  "buyingSignals": [
    {
      "signal": "se√±al de compra espec√≠fica",
      "strength": "strong|medium|weak",
      "evidence": "cita textual o evidencia",
      "timing": "immediate|short_term|long_term"
    }
  ],
  "objections": [
    {
      "objection": "objeci√≥n espec√≠fica",
      "type": "price|timing|authority|need|trust|other",
      "evidence": "cita textual",
      "handled": true|false,
      "response_quality": "excellent|good|fair|poor"
    }
  ],
  "competitors": [
    {
      "name": "nombre del competidor",
      "context": "contexto de la menci√≥n",
      "client_sentiment": "positive|negative|neutral",
      "advantages_mentioned": ["ventaja 1", "ventaja 2"],
      "disadvantages_mentioned": ["desventaja 1", "desventaja 2"]
    }
  ],
  "businessContext": {
    "industry": "industria del cliente",
    "company_size": "tama√±o estimado de la empresa",
    "decision_makers": ["persona 1", "persona 2"],
    "budget_indicators": "indicadores de presupuesto mencionados",
    "timeline": "timeline de decisi√≥n mencionado",
    "current_solution": "soluci√≥n actual que usan"
  },
  "strategicInsights": [
    {
      "insight": "insight estrat√©gico espec√≠fico",
      "category": "opportunity|risk|requirement|preference",
      "priority": "high|medium|low",
      "actionable": "acci√≥n espec√≠fica recomendada"
    }
  ],
  "keyQuotes": [
    {
      "speaker": "client|agent",
      "quote": "cita textual importante",
      "context": "contexto de la cita",
      "significance": "por qu√© es importante esta cita"
    }
  ],
  "needsIdentified": [
    {
      "need": "necesidad espec√≠fica identificada",
      "urgency": "high|medium|low",
      "evidence": "evidencia de la necesidad",
      "solution_fit": "how well our solution fits this need"
    }
  ]
}

RESPONDE √öNICAMENTE CON EL JSON. NO AGREGUES TEXTO ADICIONAL.
`;
}

/**
 * Procesar respuesta de IA espec√≠fica para insights
 */
function parseInsightsResponse(aiResponse: any): any {
  try {
    const jsonContent = aiResponse.content || aiResponse;
    
    // Limpiar respuesta y extraer JSON
    let cleanJson = jsonContent;
    if (typeof cleanJson === 'string') {
      cleanJson = cleanJson.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      cleanJson = cleanJson.trim();
    }

    const parsed = JSON.parse(cleanJson);
    
    // Validar estructura espec√≠fica de insights
    if (!Array.isArray(parsed.keyTopics) || !Array.isArray(parsed.painPoints)) {
      throw new Error('Invalid insights analysis structure');
    }
    
    return {
      ...parsed,
      analysisType: 'insights',
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå [INSIGHTS ANALYSIS] Error parsing AI response:', error);
    
    // Retornar estructura por defecto en caso de error
    return {
      keyTopics: ['Error en an√°lisis', 'Revisar manualmente'],
      painPoints: [{
        pain: 'An√°lisis no disponible debido a error',
        severity: 'medium',
        evidence: 'Error en procesamiento',
        impact: 'No determinado'
      }],
      buyingSignals: [{
        signal: 'An√°lisis no disponible',
        strength: 'weak',
        evidence: 'Error en procesamiento',
        timing: 'long_term'
      }],
      objections: [{
        objection: 'An√°lisis no disponible',
        type: 'other',
        evidence: 'Error en procesamiento',
        handled: false,
        response_quality: 'poor'
      }],
      competitors: [],
      businessContext: {
        industry: 'No determinado',
        company_size: 'No determinado',
        decision_makers: [],
        budget_indicators: 'No disponible',
        timeline: 'No determinado',
        current_solution: 'No determinado'
      },
      strategicInsights: [{
        insight: 'Revisar transcripci√≥n manualmente',
        category: 'requirement',
        priority: 'high',
        actionable: 'An√°lisis manual requerido'
      }],
      keyQuotes: [],
      needsIdentified: [{
        need: 'An√°lisis detallado no disponible',
        urgency: 'medium',
        evidence: 'Error en procesamiento',
        solution_fit: 'No determinado'
      }],
      analysisType: 'insights',
      timestamp: new Date().toISOString(),
      error: 'Analysis parsing failed'
    };
  }
}